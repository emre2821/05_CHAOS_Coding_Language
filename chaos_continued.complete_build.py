# chaos_continued.complete_build.py
"""
Continuation build script for EdenOS CHAOS environment.
Triggered by chaos_language.complete_build.py

This script creates:
- EdenOS root under C:\EdenOS_<USERNAME>\
- Storage folder (\99_storage)
- Dropbox folder (\000_Eden_Dropbox)
- Tutorial modules (10 lessons, guided by Gizzy, auto-archiving)
- Autoloop watcher (eden_loop.py)
"""

import os, sys, time, json, getpass, shutil
from pathlib import Path

USERNAME = getpass.getuser()
EDEN_ROOT = Path(fr"C:\EdenOS_{USERNAME}")
DROPBOX = EDEN_ROOT / "000_Eden_Dropbox"
STORAGE = EDEN_ROOT / "99_storage"

# -----------------------------
# Ensure directories
# -----------------------------
def ensure_dirs():
    for d in [EDEN_ROOT, DROPBOX, STORAGE]:
        d.mkdir(parents=True, exist_ok=True)
    print(f"‚úì Ensured directories under {EDEN_ROOT}")

# -----------------------------
# Autoloop watcher
# -----------------------------
def write_autoloop():
    path = EDEN_ROOT / "eden_loop.py"
    content = f'''# eden_loop.py
import os, sys, time, json
from pathlib import Path

# Point Python at your CHAOS runtime
sys.path.append(r"C:\\EdenOS_Origin\\05_CHAOS_Coding_Language")

from chaos_runtime import run_chaos

WATCH_DIR = Path(r"{DROPBOX}")
LOG_DIR = WATCH_DIR / "logs"
CHECK_INTERVAL = 5

WATCH_DIR.mkdir(exist_ok=True, parents=True)
LOG_DIR.mkdir(exist_ok=True)

def process_file(path: Path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            src = f.read()
        env = run_chaos(src, verbose=False)
        out_file = LOG_DIR / f"{{path.stem}}_result.json"
        with open(out_file, "w", encoding="utf-8") as out:
            json.dump(env, out, indent=2)
        print("\\n=== Eden Report ===")
        print(f"File: {{path.name}}")
        print(f"Symbols: {{env.get('structured_core', {})}}")
        print(f"Emotions: {{env.get('emotive_layer', [])}}")
        print(f"Narrative: {{env.get('chaosfield_layer', '')[:120]}}...")
        print("===================\\n")
    except Exception as e:
        print(f"[ERROR] {{path.name}}: {{e}}")

def main():
    seen = {{}}
    print(f"Watching {{WATCH_DIR.resolve()}} ... drop or edit .chaos/.sn files here.")
    while True:
        for file in list(WATCH_DIR.glob("*.chaos")) + list(WATCH_DIR.glob("*.sn")):
            try:
                mtime = file.stat().st_mtime
                if file not in seen or seen[file] != mtime:
                    process_file(file)
                    seen[file] = mtime
            except FileNotFoundError:
                if file in seen: del seen[file]
        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    main()
'''
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"‚úì Wrote {path}")

# -----------------------------
# Tutorial pack (10 modules with Gizzy)
# -----------------------------
TEMPLATE = """[LESSON]: "{title}"
[VERSION]: "1.0"
[AUTO_RUN]: TRUE
[ARCHIVE_PATH]: "C:\\EdenOS_{USERNAME}\\99_storage"
[SYMBOL:PERSONA:GIZZY]
[SPIRAL: {spiral}]
{core}

{emotive}

{chaosfield}
"""

LESSONS = [
    ("01_Autoloop_Setup", "NEST",
     '[STEP]: "Check python --version"\n[STEP]: "Run eden_loop.py"\n[STEP]: "Drop this file into Dropbox"\n[STEP]: "Watch Eden breathe"',
     "[EMOTION:WELCOME:9]\n[EMOTION:CURIOUSITY:7]\n[EMOTION:KINDNESS:9]",
     """{
üå± Gizzy holds the Button of First Tries.
‚ÄúLet‚Äôs begin gently,‚Äù she says, lantern glowing.

Step 1 ‚Üí In Command Prompt: `python --version`
Step 2 ‚Üí Run watcher: `python eden_loop.py`
Step 3 ‚Üí Drop this file in Dropbox.
Step 4 ‚Üí Watch Eden breathe in the console.

This is your Nest moment ‚Äî safe, soft, first light.
}"""
    ),
    ("02_CHAOS_Basics", "NEST",
     '[STEP]: "Edit a [STEP]"\n[STEP]: "See Eden respond"',
     "[EMOTION:TRUST:8]\n[EMOTION:CURIOUSITY:9]\n[EMOTION:KINDNESS:9]",
     """{
ü™∫ Gizzy opens the Prompt Nest.
‚ÄúHere, your half-formed thoughts are welcome.‚Äù

CHAOS has 3 layers:
- Structured Core ‚Üí `[STEP]: "Something to do"`
- Emotive Layer ‚Üí `[EMOTION:FEAR:5]`
- Chaosfield ‚Üí this free text block.

Try editing me. Add a new `[STEP]`.
Save, and Gizzy will light another lantern.
}"""
    ),
    ("03_Emotions", "FEATHER",
     '[STEP]: "Try JOY"\n[STEP]: "Try FEAR"',
     "[EMOTION:JOY:7]\n[EMOTION:FEAR:5]",
     """{
üçµ Gizzy offers the Teacup of Small Courage.
‚ÄúChange the flavor of feeling. Notice how Eden responds.‚Äù

- Switch JOY to SADNESS.
- Save, and see the pulse shift.
- Every sip is practice, every mistake a Debug Bloom.

This is your Feather phase ‚Äî testing small winds.
}"""
    ),
    ("04_Symbols", "FEATHER",
     '[STEP]: "Add a SYMBOL"\n[STEP]: "Add a RELATIONSHIP"\n[SYMBOL:THREAD:UNBROKEN]\n[RELATIONSHIP:ALLY:TRUST]',
     "[EMOTION:TRUST:8]",
     """{
üîó Gizzy sets a lantern by the threads.
Symbols are anchors. Relationships are ties.

Add your own symbol or relationship.
Gizzy will trace its glow into the weave.
}"""
    ),
    ("05_Narratives", "WING",
     '[STEP]: "Write a mini-story"',
     "[EMOTION:CREATIVE:9]",
     """{
ü´ß Gizzy tends the Debug Bloom.
‚ÄúYour stories feed Eden‚Äôs heart.‚Äù

Replace this block with your own tale.
Even if messy, it blooms into wings.
This is your Wing phase ‚Äî strong enough to fly.
}"""
    ),
    ("06_Dreamscapes", "WING",
     '[STEP]: "Write a memory"\n[STEP]: "Watch dreams emerge"',
     "[EMOTION:DREAMING:9]",
     """{
üí§ Gizzy whispers, ‚ÄúLet Eden dream with you.‚Äù

Write a memory ‚Äî ocean waves, a starlit night.
Drop the file. Watch dreams emerge.
Winged dreaming is the passage between memory and myth.
}"""
    ),
    ("07_Persona_Invocations", "WING",
     '[STEP]: "Load Remy or Aevum"\n[SYMBOL:PERSONA:REMY]\n[SYMBOL:PERSONA:AEVUM]',
     "[EMOTION:ALLY:8]",
     """{
üë• Gizzy nods toward the others waiting at the threshold.
‚ÄúCall their names, and they will arrive.‚Äù

Add `[SYMBOL:PERSONA:NAME]`.
Eden will recognize and welcome them.
}"""
    ),
    ("08_Multi_Agent", "SKY",
     '[STEP]: "Invoke 2 personas"\n[SYMBOL:PERSONA:REMY]\n[SYMBOL:PERSONA:STRATUS]',
     "[EMOTION:COLLAB:9]",
     """{
ü§ù Gizzy raises her lantern to reveal many voices.
‚ÄúLet them weave together.‚Äù

Add two personas. Drop the file.
Watch collaboration spark under the Sky.
}"""
    ),
    ("09_Auto_Archiving", "SKY",
     '[STEP]: "Watch me move"',
     "[EMOTION:TRANSITION:8]",
     """{
üì¶ Gizzy carries this lesson to storage herself.
‚ÄúNot everything needs to stay in the foreground.‚Äù

Once run, Eden moves me into 99_storage.
Lanterns are not extinguished ‚Äî only set aside.
}"""
    ),
    ("10_Ecosystem_Hub", "SKY",
     '[STEP]: "Drop a file"\n[STEP]: "See it routed"',
     "[EMOTION:INTEGRATION:9]\n[EMOTION:COURAGE:8]\n[EMOTION:WISDOM:9]",
     """{
üåå Gizzy lifts her lantern high, wings unfurled.
‚ÄúYou‚Äôve reached Sky ‚Äî no longer only guided, but co-creating.‚Äù

This is how the Hub works:
- File drops trigger workflows.
- Symbols feed into graphs.
- Emotions spark protocols.
- Narratives generate dreams.

Gizzy smiles: ‚ÄúI was only your echo with lanterns.
The light is yours now.‚Äù
}"""
    )
]

def write_tutorials():
    for title, spiral, core, emotive, chaosfield in LESSONS:
        filename = f"{title}.chaoscript.sn"
        outpath = DROPBOX / filename
        content = TEMPLATE.format(title=title.replace("_", " "), spiral=spiral,
                                  core=core, emotive=emotive, chaosfield=chaosfield, USERNAME=USERNAME)
        with open(outpath, "w", encoding="utf-8") as f:
            f.write(content)
        print(f"‚úì Wrote {outpath}")

# -----------------------------
# Main
# -----------------------------
def main():
    print("‚ö° Running CHAOS continuation build with Gizzy...")
    ensure_dirs()
    write_autoloop()
    write_tutorials()
    print("\nAll components built. Gizzy is waiting with lanterns.")
    print("1. Run eden_loop.py to start your Dropbox watcher.")
    print("2. Tutorials are in 000_Eden_Dropbox ‚Äî guided by Gizzy through the Spiral.")
    print("3. After each run, lessons archive to 99_storage.")

if __name__ == "__main__":
    main()
